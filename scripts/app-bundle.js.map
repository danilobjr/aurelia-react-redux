{"version":3,"sources":["app.tsx","environment.ts","main.ts","store.ts","datagrid/actions.ts","datagrid/reducers.ts","datagrid/SortDirection.ts","resources/index.ts","datagrid/datagrid.tsx","datagrid/components/Datagrid.tsx"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import * as React from 'react'\r\nimport { IDatagridHeader, IDatagridSorting } from './datagrid/components/Datagrid'\r\nimport { SortDirection } from './datagrid/SortDirection'\r\nimport { store } from './store'\r\n\r\nexport interface IPerson {\r\n    id: number;\r\n    name: string;\r\n    email: string | JSX.Element;\r\n}\r\n\r\nexport class App {\r\n    private store: any = store;\r\n\r\n    constructor(\r\n        public people: IPerson[],\r\n        public gridHeaders: IDatagridHeader[],\r\n        public gridSorting: IDatagridSorting\r\n    ) {\r\n        const peopleMapped = [\r\n            { id: 1, name: 'Danilo', email: 'danilo@beakyn.com' },\r\n            { id: 2, name: 'Abraao', email: 'abraao@beakyn.com' },\r\n            { id: 3, name: 'Ricardo', email: 'ricardo@beakyn.com' },\r\n            { id: 4, name: 'Juan', email: 'juan@beakyn.com' }\r\n        ];\r\n\r\n        this.people = peopleMapped.map(p => ({\r\n            id: p.id,\r\n            name: p.name,\r\n            email: <a href={`mailto:${p.email}`}>{p.email}</a> \r\n        }));\r\n\r\n        this.gridHeaders = [\r\n            { \r\n                key: 'name',\r\n                render: 'Name'\r\n            },\r\n            { \r\n                key: 'email',\r\n                render: <strong style={{ color: 'red', textTransform: 'uppercase' }}>Name</strong>\r\n            }\r\n        ];\r\n\r\n        this.gridSorting = {\r\n            columnKey: 'name',\r\n            direction: SortDirection.Asc\r\n        };\r\n\r\n        const state = this.store.getState();\r\n        console.log(state.datagrid);\r\n        this.store.subscribe(this.update.bind(this));\r\n    }\r\n\r\n    update() {\r\n        const state = this.store.getState();\r\n        console.log(state.datagrid);\r\n    }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { createStore, combineReducers } from 'redux'\r\nimport { datagrid, IDatagridState } from './datagrid/reducers'\r\n\r\nexport interface IState {\r\n    datagrid: IDatagridState;\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    datagrid\r\n});\r\n\r\nexport const store = createStore(reducers);\r\n","export type SORT = 'datagrid.components.actions.SORT';\r\nexport const SORT: SORT = 'datagrid.components.actions.SORT';\r\n\r\nexport type SortAction = {\r\n    type: SORT;\r\n    columnKey: string;\r\n};\r\n\r\nexport const sortByColumnName = (columnKey: string): SortAction => ({\r\n    type: SORT,\r\n    columnKey\r\n});\r\n","import { SORT, SortAction } from './actions'\r\nimport { SortDirection } from './SortDirection'\r\n\r\ntype DatagridAction = SortAction;\r\n\r\nexport interface IDatagridState {\r\n    sortColumnKey: string;\r\n    sortDirection: SortDirection;\r\n}\r\n\r\nconst initialState = {\r\n    sortColumnKey: 'updatedAt',\r\n    sortDirection: SortDirection.Asc\r\n} as IDatagridState;\r\n\r\nexport const datagrid = (state: IDatagridState = initialState, action: DatagridAction): IDatagridState => {\r\n    switch (action.type) {\r\n        case SORT:\r\n            const sortDirection = state.sortColumnKey === action.columnKey \r\n                ? (state.sortDirection === SortDirection.Asc ? SortDirection.Desc : SortDirection.Asc)\r\n                : SortDirection.Asc;\r\n\r\n            return Object.assign({}, state, { \r\n                sortColumnKey: action.columnKey,\r\n                sortDirection: sortDirection\r\n            } as IDatagridState);\r\n        default:\r\n            return state;            \r\n    }\r\n}\r\n","export enum SortDirection {\r\n    Asc,\r\n    Desc\r\n}\r\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Store } from 'redux'\r\nimport { inject, bindable, noView } from 'aurelia-framework';\r\nimport { Datagrid, IDatagridHeader, IDatagridSorting } from './components/Datagrid';\r\nimport { sortByColumnName } from './actions';\r\nimport { store, IState } from './../store'\r\nimport { IPerson } from './../app'\r\n\r\n@noView()\r\n@inject(Element)\r\nexport class DatagridCustomElement {\r\n    @bindable data: any[];\r\n    @bindable headers: IDatagridHeader[];\r\n    @bindable sorting: IDatagridSorting;\r\n\r\n    private store: any = store;\r\n\r\n    constructor(\r\n        private element: Element,\r\n    ) {\r\n        this.element = element;\r\n\r\n        const state = this.store.getState() as IState;\r\n\r\n        this.sorting = this.sorting || {\r\n            columnKey: state.datagrid.sortColumnKey,\r\n            direction: state.datagrid.sortDirection\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        ReactDOM.render(\r\n            <Datagrid\r\n                data={this.data} \r\n                headers={this.headers}\r\n                sorting={this.sorting}\r\n                onSort={this.sort}\r\n            />,\r\n            this.element\r\n        );\r\n    }\r\n    \r\n    bind() {\r\n        this.render();\r\n    }\r\n    \r\n    /**\r\n     * Data Changed\r\n     * \r\n     * An automatic callback function when our \"data\"\r\n     * bindable value changes. We need to rebind the React\r\n     * element to get the new data from the ViewModel.\r\n     * \r\n     * @param {any} newVal The updated data\r\n     * @returns {void}\r\n     * \r\n     */\r\n    dataChanged(newVal) {\r\n        this.bind();\r\n    }\r\n\r\n    sort = (column: string) => {\r\n        this.store.dispatch(sortByColumnName(column));\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { SortDirection } from './../SortDirection'\r\n\r\ninterface IDatagridHeader {\r\n    key: string; \r\n    render: string | JSX.Element;\r\n}\r\n\r\ninterface IDatagridSorting {\r\n    columnKey: string; \r\n    direction: SortDirection;\r\n}\r\n\r\ninterface IProps {\r\n    data: any[];\r\n    headers: IDatagridHeader[];\r\n    sorting: IDatagridSorting;\r\n    onSort: (column: string) => void;\r\n}\r\n\r\nclass Datagrid extends React.Component<IProps, any> {\r\n    private dataPropertiesForRenderTableCells: string[];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.dataPropertiesForRenderTableCells = this.props.headers.map(c => c.key);\r\n    }\r\n\r\n    static defaultProperties = {\r\n        data: []\r\n    }\r\n    \r\n    render() {\r\n        if (!this.props.data.length) {\r\n            return null;\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                <table>\r\n                    <thead>{this.renderHeaders()}</thead>\r\n                    <tbody>{this.renderBody()}</tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderHeaders() {\r\n        const { headers, onSort } = this.props;\r\n\r\n        return headers.map((c, index) => {\r\n            return (\r\n                <th key={index} onClick={() => onSort(c.key)}>{c.render}</th>\r\n            );\r\n        });\r\n    }\r\n\r\n    renderBody() {\r\n        const { headers, data }: IProps = this.props;\r\n\r\n        return data.map((d, index) => \r\n            <tr key={index}>\r\n                {this.renderCells(d)}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderCells(data) {\r\n        return this.dataPropertiesForRenderTableCells.map((property, index) => \r\n            <td key={index}>{data[property]}</td>\r\n        );\r\n    }\r\n}\r\n\r\nexport {\r\n    Datagrid,\r\n    IDatagridHeader,\r\n    IDatagridSorting\r\n}\r\n"],"sourceRoot":".."}